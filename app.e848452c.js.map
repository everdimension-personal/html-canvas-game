{"version":3,"sources":["Bird.ts","Particle.ts","Obstacle.ts","game-over.ts","score.ts","app.ts"],"names":[],"mappings":"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","file":"app.e848452c.js","sourceRoot":"../src","sourcesContent":["import type { GameState } from \"./app\";\n\nexport class Bird {\n  x: number;\n  y: number;\n  vy: number;\n  width: number;\n  height: number;\n  weight: number;\n\n  constructor() {\n    this.x = 150;\n    this.y = 200;\n    this.vy = 0;\n    this.width = 20;\n    this.height = 20;\n    this.weight = 1;\n  }\n  update(ctx: CanvasRenderingContext2D, state: GameState) {\n    const { canvas } = ctx;\n    const curve = Math.sin(state.angle) * 20;\n    const padding = this.height * 3;\n    if (this.y + padding + curve > canvas.height) {\n      this.y = canvas.height - padding - curve;\n      this.vy = 0;\n    } else if (this.y < 0) {\n      this.y = 0;\n      this.vy = 0;\n    } else {\n      this.vy += this.weight;\n      this.vy *= 0.9;\n      this.y += this.vy;\n    }\n    if (state.spacePressed && this.y > padding) {\n      this.flap();\n    }\n  }\n  flap() {\n    this.vy -= 2;\n  }\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = \"#f06\";\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n}\n","import type { Bird } from \"./Bird\";\nimport type { GameState } from \"./app\";\n\nexport class Particle {\n  x: number;\n  y: number;\n  size: number;\n  speedY: number;\n  color: string;\n\n  constructor(bird: Bird, state: GameState) {\n    this.x = bird.x;\n    this.y = bird.y;\n    this.size = Math.random() * 7 + 3;\n    this.speedY = Math.random() - 0.5;\n    this.color = `hsla(${state.hue}, 100%, 50%, 0.8)`;\n  }\n\n  update(state: GameState) {\n    this.x -= state.gamespeed;\n    this.y += this.speedY;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n    ctx.fill();\n  }\n}\n\nconst particles: Particle[] = [];\n\nexport function updateParticles(\n  ctx: CanvasRenderingContext2D,\n  state: GameState,\n  bird: Bird\n) {\n  const recentCollision =\n    state.collisionFrame !== 0 && state.frame - state.collisionFrame < 30;\n  if (!recentCollision) {\n    particles.unshift(new Particle(bird, state));\n  }\n  for (let i = 0; i < particles.length; i++) {\n    particles[i].update(state);\n    particles[i].draw(ctx);\n  }\n  if (particles.length > 200) {\n    particles.length = particles.length - 20;\n  }\n}\n","import type { GameState } from \"./app\";\nimport type { Bird } from \"./Bird\";\n\nclass Obstacle {\n  topHeight: number;\n  bottomHeight: number;\n  bottomY: number;\n  width: number;\n  x: number;\n  color: string;\n  didPass: boolean;\n\n  constructor(ctx: CanvasRenderingContext2D, state: GameState) {\n    const { canvas } = ctx;\n    this.topHeight = (Math.random() * canvas.height) / 3 + 30;\n    this.bottomHeight = (Math.random() * canvas.height) / 3 + 30;\n    this.bottomY = canvas.height;\n    this.width = 20;\n    this.x = canvas.width;\n    this.color = `hsl(${state.hue}, 100%, 50%)`;\n    this.didPass = false;\n  }\n\n  update(state: GameState) {\n    this.x -= state.gamespeed;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, 0, this.width, this.topHeight);\n    ctx.fillRect(\n      this.x,\n      this.bottomY - this.bottomHeight,\n      this.width,\n      this.bottomHeight\n    );\n  }\n}\n\nexport const obstacles: Obstacle[] = [];\n\nexport function updateObstacles(\n  ctx: CanvasRenderingContext2D,\n  state: GameState\n) {\n  if (state.frame % 50 === 0) {\n    obstacles.unshift(new Obstacle(ctx, state));\n  }\n  obstacles.forEach((obstacle) => {\n    obstacle.update(state);\n    obstacle.draw(ctx);\n  });\n  if (obstacles.length > 20) {\n    obstacles.pop();\n  }\n}\n\ninterface Bounds {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n}\n\nfunction intersects(boundsA: Bounds, boundsB: Bounds): boolean {\n  if (boundsA.left > boundsB.right) {\n    return false;\n  }\n  if (boundsA.top > boundsB.bottom) {\n    return false;\n  }\n  if (boundsA.right < boundsB.left) {\n    return false;\n  }\n  if (boundsA.bottom < boundsB.top) {\n    return false;\n  }\n  return true;\n}\n\nconst boomImage = new Image();\n// @ts-ignore require call\nboomImage.src = require(\"./assets/boom.png\");\n\nexport function handleCollision(\n  ctx: CanvasRenderingContext2D,\n  bird: Bird\n): boolean {\n  return obstacles.some((obstacle) => {\n    const topObstacleBounds = {\n      top: 0,\n      bottom: obstacle.topHeight,\n      left: obstacle.x,\n      right: obstacle.x + obstacle.width,\n    };\n    const bottomObstacleBounds = {\n      top: obstacle.bottomY - obstacle.bottomHeight,\n      bottom: obstacle.bottomY,\n      left: obstacle.x,\n      right: obstacle.x + obstacle.width,\n    };\n    const birdBounds = {\n      top: bird.y,\n      bottom: bird.y + bird.height,\n      left: bird.x,\n      right: bird.x + bird.width,\n    };\n    if (\n      intersects(birdBounds, topObstacleBounds) ||\n      intersects(birdBounds, bottomObstacleBounds)\n    ) {\n      ctx.drawImage(\n        boomImage,\n        birdBounds.right - 10,\n        birdBounds.top - 10,\n        30,\n        30\n      );\n      return true;\n    }\n  });\n}\n\nexport function getNewlyPassedObstaclesCount(bird: Bird) {\n  let count = 0;\n  const birdLeftEdge = bird.x;\n  obstacles\n    .filter((obstacle) => !obstacle.didPass)\n    .forEach((obstacle) => {\n      const rightEdge = obstacle.x + obstacle.width;\n      if (rightEdge < birdLeftEdge) {\n        count++;\n        obstacle.didPass = true;\n      }\n    });\n  return count;\n}\n","import { GameState } from \"./app\";\n\nexport function handleGameOver(\n  ctx: CanvasRenderingContext2D,\n  state: GameState\n) {\n  ctx.fillStyle = \"#222\";\n  ctx.font = \"48px Helvetica\";\n  const text = `Game Over. Score: ${state.score}`;\n  const textMetrics = ctx.measureText(text);\n  ctx.fillText(text, ctx.canvas.width / 2 - textMetrics.width / 2, 100);\n}\n","import { GameState } from \"./app\";\n\nexport function updateScore(ctx: CanvasRenderingContext2D, state: GameState) {\n  ctx.fillStyle = \"#333\";\n  ctx.font = \"48px Helvetica\";\n  const text = String(state.score);\n  const textMetrics = ctx.measureText(text);\n  const rightPadding = 15;\n  const topPadding = 45;\n  ctx.fillText(\n    text,\n    ctx.canvas.width - textMetrics.width - rightPadding,\n    topPadding\n  );\n}\n","import \"./app.css\";\nimport { Bird } from \"./Bird\";\nimport { updateParticles } from \"./Particle\";\nimport {\n  updateObstacles,\n  handleCollision,\n  getNewlyPassedObstaclesCount,\n} from \"./Obstacle\";\nimport { handleGameOver } from \"./game-over\";\nimport { updateScore } from \"./score\";\n\nconsole.log(\"hello\");\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst ctx = canvas.getContext(\"2d\")!;\nif (!ctx) {\n  throw new Error(\"2D rendering context not found\");\n}\ncanvas.width = 600;\ncanvas.height = 400;\n\nconst gameState = {\n  spacePressed: false,\n  angle: 0,\n  hue: 200,\n  frame: 0,\n  score: 0,\n  gamespeed: 2,\n  collisionFrame: 0,\n  isGameOver: false,\n  pause: false,\n};\nexport type GameState = typeof gameState;\n\nconst bird = new Bird();\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  gameState.angle += 0.2;\n  gameState.hue += 1;\n  gameState.frame += 1;\n  updateObstacles(ctx, gameState);\n  bird.update(ctx, gameState);\n  bird.draw(ctx);\n\n  const newlyPassedObjects = getNewlyPassedObstaclesCount(bird);\n  gameState.score += newlyPassedObjects;\n\n  const collides = handleCollision(ctx, bird);\n  if (collides) {\n    gameState.collisionFrame = gameState.frame;\n    gameState.isGameOver = true;\n  }\n  if (gameState.isGameOver) {\n    handleGameOver(ctx, gameState);\n    return;\n  }\n  updateScore(ctx, gameState);\n  updateParticles(ctx, gameState, bird);\n  if (gameState.pause) {\n    return;\n  }\n  requestAnimationFrame(animate);\n}\n\nanimate();\n\nwindow.addEventListener(\"keydown\", (event) => {\n  if (event.code === \"Space\") {\n    if (gameState.isGameOver) {\n      gameState.isGameOver = false;\n      animate();\n    }\n    gameState.spacePressed = true;\n  }\n  if (event.key === \"p\") {\n    // pause\n    gameState.pause = !gameState.pause;\n    if (!gameState.pause) {\n      // resume\n      animate();\n    }\n  }\n});\nwindow.addEventListener(\"keyup\", (event) => {\n  if (event.code === \"Space\") {\n    gameState.spacePressed = false;\n  }\n});\n"]}